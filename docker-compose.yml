# This docker compose setup configures:
# - the Unleash server instance + the necessary backing Postgres database
# - the Unleash proxy
#
# To learn more about all the parts of Unleash, visit
# https://docs.getunleash.io
#
# NOTE: please do not use this configuration for production setups.
# Unleash does not take responsibility for any data leaks or other
# problems that may arise as a result.
#
# This is intended to be used for demo, development, and learning
# purposes only.

version: "3.9"
services:

  # The Unleash server contains the Unleash configuration and
  # communicates with server-side SDKs and the Unleash Proxy
  web:
    image: leitop2k/unleash_4.15.4:latest
    ports:
      - "4242:4242"
    environment:
      # This points Unleash to its backing database (defined in the `db` section below)
      DATABASE_URL: "postgres://unleash:-si5/r>YRgo}L!A@192.168.1.4:5432/unleash_db"
      # Disable SSL for database connections. @chriswk: why do we do this?
      DATABASE_SSL: "false"
      # Changing log levels:
      LOG_LEVEL: "warn"
      # Proxy clients must use one of these keys to connect to the
      # Proxy. To add more keys, separate them with a comma (`key1,key2`).
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      # Initialize Unleash with a default set of client API tokens. To
      # initialize Unleash with multiple tokens, separate them with a
      # comma (`token1,token2`).
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
      KEYCLOAK_DOMAIN: "https://unleash.nekto-z.ru"
      KEYCLOAK_PATH: "/auth/saml/login/callback"
      KEYCLOAK_ENTRY_POINT: "https://keycloak.nekto-z.ru/auth/realms/Test/protocol/saml/clients/unleash"
      KEYCLOAK_ISSUER: "unleash"
      KEYCLOAK_CERT: "MIIClzCCAX8CBgGJIE5PGjANBgkqhkiG9w0BAQsFADAPMQ0wCwYDVQQDDARUZXN0MB4XDTIzMDcwNDA5NDczMFoXDTMzMDcwNDA5NDkxMFowDzENMAsGA1UEAwwEVGVzdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL0PlHcTlD9k3pz19x1UqBCyHV0h/XwE6IPChWybTHKLfTW0OGjhNACCTp4e5Wa8sW54QJvZSq3zVyB7XdRqVxAnCHzvJ4PAZ4GGk7R2dr285CgEj0aUByf3r9wy9P0rdh6Gu1PnWhzCKOJz/c/Qkh+o5kbjGdnToee4bkdbMCnBLphrdHPh+VjpWzPSVYUXcIWhmf7r3y5zIGeWB1loHYuzkl01dMTuDjV3fuKjHonspMd8XYdp3EyQUaL6pZYMOMeCUt3MqX5JuHridHP4gTUNP2RczCwEvgdu3Kts6e9S9nNjTRafS1sov6NCTMlIkK3zSm39QcH7EDS8PMAHRLMCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEALzL6MFOO6W56xqMbuhk5i5z0nV/GNHYbFSkePiiSe5jlbKS9uBxQJaFDbxsZ0N5bmh/3oFdnhbJtBy/CIxOxAFgOGtMExi6jE8WogSKTGtq1NCg5qR7WlFm6RaDncIqrvSRrWgE2LIqk+KP0VnUj1ieftv/n4BWnMoN1gLao9IEUNcO3XR9Sgyhxx2wc0F3ZbEjVLLUSq6NeOromlteuLbaSE1JBElxgIcVrKhwllpqYoqKqIPgpff7wBqzwvgDuIUhWu7SIBJ4lic9oboRCR9tsmV2h1G913jxeSbSgvQV/Kd4WsUOOGbCr506Q3p03sbwvYT3c1eFo1EAXBlcSWQ=="
    depends_on:
      db:
        condition: service_healthy
    command: [ "node", "index.js" ]
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
  db:
    expose:
      - "5432"
    image: postgres:15
    ports:
      - "25432:5432"
    environment:
      # create a database called `db`
      POSTGRES_DB: "db"
      # trust incoming connections blindly (DON'T DO THIS IN PRODUCTION!)
      POSTGRES_HOST_AUTH_METHOD: "trust"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username=postgres",
          "--host=127.0.0.1",
          "--port=5432"
        ]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
  pgadmin:
    image: dpage/pgadmin4:6
    environment:
      PGADMIN_DEFAULT_EMAIL: unleash@nekto-z.ru
      PGADMIN_DEFAULT_PASSWORD: unleash
    ports:
      - "15432:80"
    volumes:
      - "pgadmin:/var/lib/pgadmin4"

volumes:
  postgres:
  pgadmin:
